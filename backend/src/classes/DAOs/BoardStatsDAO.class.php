<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2017-05-02 20:12:17                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	abstract class BoardStatsDAO extends AutoBoardStatsDAO
	{
        public function aggregate(TimestampRange $timestampRange) {
            $criteria = $this->makeStatsCriteria($timestampRange);
            $rows = $criteria->getCustomList();
            $list = [];
            foreach ($rows as $row) {
                $row['id'] = 'NULL'; // without 'id' building of object fails
                $object = $this->makeOnlyObject($row);
                $object->setId(null);
                $list []= $object;
            }
            return $list;
        }

        /**
         * @param BoardStats[] $stats
         */
        public function store(array $stats)
        {
            foreach ($stats as $stat) {
                $existing = Criteria::create($this)
                    ->add(Expression::eq('board', $stat->getBoardId()))
                    ->add(Expression::eq($this->getPeriodFieldName(), $stat->getActualPeriodValue()))
                    ->get();
                if ($existing instanceof BoardStats) {
                    $stat->setId($existing->getId());
                    if ($stat != $existing) {
                        $this->save($stat);
                    }
                } else {
                    $this->add($stat);
                }
            }
        }

        public function makeStatsCriteria(TimestampRange $timestampRange)
        {
            $period = $this->makePeriodDateTrunc('createDate');
            $criteria = Criteria::create(Post::dao())
                ->add(Expression::between('createDate', $timestampRange->getStart(), $timestampRange->getEnd()))
                ->addProjection(Projection::count('id', 'posts'))
                ->addProjection(Projection::count(
                    ConditionalSwitch::create()
                        ->addWhen(Expression::isNull('parent'), true)->addElse(null),
                    'threads_new'
                ))
                ->addProjection(Projection::distinctCount('thread', 'threads_active'))
                ->addProjection(Projection::distinctCount('ipHash', 'unique_posters'))
                ->addProjection(Projection::property($period, $this->getPeriodFieldName()))
                ->addProjection(Projection::property('thread.board', 'board_id'))
                ->addProjection(Projection::group('thread.board'))
                ->addProjection(Projection::group($period))
                ->addOrder(OrderBy::create($period))
                ->addOrder(OrderBy::create('thread.board'));

            return $criteria;
        }

        abstract public function getPeriodFieldName();

        abstract public function getPeriodDateTruncArg();

        public function makePeriodDateTrunc($dateField)
        {
            return SQLFunction::create('date_trunc', $this->getPeriodDateTruncArg(), $dateField);
        }

        abstract public function truncateTimestamp(Timestamp $timestamp);

        /**
         * @param Board $board
         * @return BoardStats
         */
        public function getCurrent(Board $board)
        {
            $period = $this->truncateTimestamp(Timestamp::makeNow());
            $stat = Criteria::create($this)
                ->add(Expression::eq('board', $board))
                ->add(Expression::eq($this->getPeriodFieldName(), $period))
                ->get();
            $objectClass = $this->getObjectName();
            if (!$stat) {
                /** @var BoardStats $stat */
                $stat = new $objectClass;
                $stat->setBoard($board);
                $stat->setActualPeriodValue($period);
            }
            return $stat;
        }

	}
?>