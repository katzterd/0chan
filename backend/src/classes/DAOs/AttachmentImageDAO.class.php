<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2017-03-02 15:25:45                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class AttachmentImageDAO extends AutoAttachmentImageDAO
	{

        public function createImages($imageBlob, $local = false)
        {
            if ($local) {
                return $this->createImagesLocal($imageBlob);
            }

            $storage = StorageServer::get();
            $result = $storage->uploadImage($imageBlob);
            $images = [];
            foreach ($result as $key => $item) {
                if ($key == '0') {
                    $role = AttachmentImageRole::create(AttachmentImageRole::ORIGINAL);
                } else if (is_numeric($key)) {
                    $role = AttachmentImageRole::create($key);
                } else {
                    continue;
                }

                $images []= AttachmentImage::create()
                    ->setRole($role)
                    ->setServer($storage->getNameExt())
                    ->setFilename($item['name'])
                    ->setFileSize($item['size'])
                    ->setHeight($item['height'])
                    ->setWidth($item['width']);
            }

            return $images;
	    }

        /**
         * @param $originalImageBlob
         * @return AttachmentImage[]
         * @throws Exception
         */
        public function createImagesLocal($originalImageBlob)
        {
            $mime = finfo_buffer(finfo_open(FILEINFO_MIME_TYPE, null), $originalImageBlob);
            if (!$mime) {
                throw new UnexpectedValueException('Не удалось распознать тип файла');
            }

            $imageFormat = ImageFileFormat::createByMime($mime);
            if (!$imageFormat) {
                throw new UnexpectedValueException('Неподходящий тип файла');
            }

            /** @var AttachmentImage[] $images */
            $images = [];

            /** @var AttachmentImageRole[] $roles */
            $roles = [
                AttachmentImageRole::create(AttachmentImageRole::ORIGINAL),
                AttachmentImageRole::create(AttachmentImageRole::PX_600),
                AttachmentImageRole::create(AttachmentImageRole::PX_400),
                AttachmentImageRole::create(AttachmentImageRole::PX_200),
                AttachmentImageRole::create(AttachmentImageRole::PX_100),
            ];

            $filename = date('ymd') . RandomUtils::makeString(10);

            $blob = $originalImageBlob;
            try {
                $image = new Imagick();
                $image->readImageBlob($blob);

                foreach ($roles as $role) {
                    if ($role->getMaxSize()) {
                        $realThumbSize = min($role->getMaxSize(), max($image->getImageWidth(), $image->getImageHeight()));

                        foreach ($image as $frame) {
                            $frame->resizeImage($realThumbSize, $realThumbSize, Imagick::FILTER_BOX, 1, true);
                        }

                        $copy = new Imagick();
                        $copy->newImage($image->getImageWidth(), $image->getImageHeight(), "white");
                        $copy->compositeimage($image, Imagick::COMPOSITE_OVER, 0, 0);
                        $copy->setImageFormat('jpg');
                        $copy->setImageCompressionQuality(90);

                        $image->destroy();
                        $image = $copy;

                        $filenameSuffix = '_' . $role->getName() . '.jpg';
                        $blob = $image->getImageBlob();
                    } else {
                        $filenameSuffix = '.' . $imageFormat->getExtension();
                    }


                    $images []= AttachmentImage::create()
                        ->setRole($role)
                        ->setFilename($filename . $filenameSuffix)
                        ->setFileSize(strlen($blob))
                        ->setHeight($image->getImageHeight())
                        ->setWidth($image->getImageWidth())
                        ->writeFile($blob);
                }

            } catch (Exception $e) {
                foreach ($images as $image) {
                    try {
                        $image->removeFile();
                    } catch (Exception $e) {}
                }
                throw $e;
            }

            return $images;
        }

        /**
         * @param AttachmentImage|Identifiable $image
         * @return mixed
         */
        public function drop(Identifiable $image)
        {
            $image->removeFile();
            return parent::drop($image);
        }
	}
?>