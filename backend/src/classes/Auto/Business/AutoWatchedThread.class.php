<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2025-06-05 10:52:30                    *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoWatchedThread extends IdentifiableObject
	{
		protected $user = null;
		protected $userId = null;
		protected $thread = null;
		protected $threadId = null;
		
		/**
		 * @return User
		**/
		public function getUser()
		{
			if (!$this->user && $this->userId) {
				$this->user = User::dao()->getById($this->userId);
			}
			
			return $this->user;
		}
		
		public function getUserId()
		{
			return $this->user
				? $this->user->getId()
				: $this->userId;
		}
		
		/**
		 * @return WatchedThread
		**/
		public function setUser(User $user)
		{
			$this->user = $user;
			$this->userId = $user ? $user->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return WatchedThread
		**/
		public function setUserId($id)
		{
			$this->user = null;
			$this->userId = $id;
			
			return $this;
		}
		
		/**
		 * @return WatchedThread
		**/
		public function dropUser()
		{
			$this->user = null;
			$this->userId = null;
			
			return $this;
		}
		
		/**
		 * @return Thread
		**/
		public function getThread()
		{
			if (!$this->thread && $this->threadId) {
				$this->thread = Thread::dao()->getById($this->threadId);
			}
			
			return $this->thread;
		}
		
		public function getThreadId()
		{
			return $this->thread
				? $this->thread->getId()
				: $this->threadId;
		}
		
		/**
		 * @return WatchedThread
		**/
		public function setThread(Thread $thread)
		{
			$this->thread = $thread;
			$this->threadId = $thread ? $thread->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return WatchedThread
		**/
		public function setThreadId($id)
		{
			$this->thread = null;
			$this->threadId = $id;
			
			return $this;
		}
		
		/**
		 * @return WatchedThread
		**/
		public function dropThread()
		{
			$this->thread = null;
			$this->threadId = null;
			
			return $this;
		}
	}
?>