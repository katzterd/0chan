<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2021-06-16 21:53:45                    *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoPost extends IdentifiableObject
	{
		protected $thread = null;
		protected $threadId = null;
		protected $parent = null;
		protected $parentId = null;
		protected $user = null;
		protected $userId = null;
		protected $ipHash = null;
		protected $createDate = null;
		protected $deleted = false;
		protected $message = null;
		protected $approved = false;
		protected $banned = false;
		protected $sage = false;
		protected $identity = null;
		protected $identityId = null;
		protected $reports = null;
		protected $replies = null;
		protected $attachments = null;
		protected $referencedBys = null;
		protected $referencesTos = null;
		
		/**
		 * @return Thread
		**/
		public function getThread()
		{
			if (!$this->thread && $this->threadId) {
				$this->thread = Thread::dao()->getById($this->threadId);
			}
			
			return $this->thread;
		}
		
		public function getThreadId()
		{
			return $this->thread
				? $this->thread->getId()
				: $this->threadId;
		}
		
		/**
		 * @return Post
		**/
		public function setThread(Thread $thread)
		{
			$this->thread = $thread;
			$this->threadId = $thread ? $thread->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Post
		**/
		public function setThreadId($id)
		{
			$this->thread = null;
			$this->threadId = $id;
			
			return $this;
		}
		
		/**
		 * @return Post
		**/
		public function dropThread()
		{
			$this->thread = null;
			$this->threadId = null;
			
			return $this;
		}
		
		/**
		 * @return Post
		**/
		public function getParent()
		{
			if (!$this->parent && $this->parentId) {
				$this->parent = Post::dao()->getById($this->parentId);
			}
			
			return $this->parent;
		}
		
		public function getParentId()
		{
			return $this->parent
				? $this->parent->getId()
				: $this->parentId;
		}
		
		/**
		 * @return Post
		**/
		public function setParent(Post $parent = null)
		{
			$this->parent = $parent;
			$this->parentId = $parent ? $parent->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Post
		**/
		public function setParentId($id = null)
		{
			$this->parent = null;
			$this->parentId = $id;
			
			return $this;
		}
		
		/**
		 * @return Post
		**/
		public function dropParent()
		{
			$this->parent = null;
			$this->parentId = null;
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function getUser()
		{
			if (!$this->user && $this->userId) {
				$this->user = User::dao()->getById($this->userId);
			}
			
			return $this->user;
		}
		
		public function getUserId()
		{
			return $this->user
				? $this->user->getId()
				: $this->userId;
		}
		
		/**
		 * @return Post
		**/
		public function setUser(User $user = null)
		{
			$this->user = $user;
			$this->userId = $user ? $user->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Post
		**/
		public function setUserId($id = null)
		{
			$this->user = null;
			$this->userId = $id;
			
			return $this;
		}
		
		/**
		 * @return Post
		**/
		public function dropUser()
		{
			$this->user = null;
			$this->userId = null;
			
			return $this;
		}
		
		public function getIpHash()
		{
			return $this->ipHash;
		}
		
		/**
		 * @return Post
		**/
		public function setIpHash($ipHash)
		{
			$this->ipHash = $ipHash;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getCreateDate()
		{
			return $this->createDate;
		}
		
		/**
		 * @return Post
		**/
		public function setCreateDate(Timestamp $createDate)
		{
			$this->createDate = $createDate;
			
			return $this;
		}
		
		/**
		 * @return Post
		**/
		public function dropCreateDate()
		{
			$this->createDate = null;
			
			return $this;
		}
		
		public function getDeleted()
		{
			return $this->deleted;
		}
		
		public function isDeleted()
		{
			return $this->deleted;
		}
		
		/**
		 * @return Post
		**/
		public function setDeleted($deleted = false)
		{
			$this->deleted = ($deleted === true);
			
			return $this;
		}
		
		public function getMessage()
		{
			return $this->message;
		}
		
		/**
		 * @return Post
		**/
		public function setMessage($message)
		{
			$this->message = $message;
			
			return $this;
		}
		
		public function getApproved()
		{
			return $this->approved;
		}
		
		public function isApproved()
		{
			return $this->approved;
		}
		
		/**
		 * @return Post
		**/
		public function setApproved($approved = false)
		{
			$this->approved = ($approved === true);
			
			return $this;
		}
		
		public function getBanned()
		{
			return $this->banned;
		}
		
		public function isBanned()
		{
			return $this->banned;
		}
		
		/**
		 * @return Post
		**/
		public function setBanned($banned = false)
		{
			$this->banned = ($banned === true);
			
			return $this;
		}
		
		public function getSage()
		{
			return $this->sage;
		}
		
		public function isSage()
		{
			return $this->sage;
		}
		
		/**
		 * @return Post
		**/
		public function setSage($sage = false)
		{
			$this->sage = ($sage === true);
			
			return $this;
		}
		
		/**
		 * @return UserIdentity
		**/
		public function getIdentity()
		{
			if (!$this->identity && $this->identityId) {
				$this->identity = UserIdentity::dao()->getById($this->identityId);
			}
			
			return $this->identity;
		}
		
		public function getIdentityId()
		{
			return $this->identity
				? $this->identity->getId()
				: $this->identityId;
		}
		
		/**
		 * @return Post
		**/
		public function setIdentity(UserIdentity $identity = null)
		{
			$this->identity = $identity;
			$this->identityId = $identity ? $identity->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Post
		**/
		public function setIdentityId($id = null)
		{
			$this->identity = null;
			$this->identityId = $id;
			
			return $this;
		}
		
		/**
		 * @return Post
		**/
		public function dropIdentity()
		{
			$this->identity = null;
			$this->identityId = null;
			
			return $this;
		}
		
		/**
		 * @return PostReportsDAO
		**/
		public function getReports($lazy = false)
		{
			if (!$this->reports || ($this->reports->isLazy() != $lazy)) {
				$this->reports = new PostReportsDAO($this, $lazy);
			}
			
			return $this->reports;
		}
		
		/**
		 * @return Post
		**/
		public function fillReports($collection, $lazy = false)
		{
			$this->reports = new PostReportsDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->reports->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return PostRepliesDAO
		**/
		public function getReplies($lazy = false)
		{
			if (!$this->replies || ($this->replies->isLazy() != $lazy)) {
				$this->replies = new PostRepliesDAO($this, $lazy);
			}
			
			return $this->replies;
		}
		
		/**
		 * @return Post
		**/
		public function fillReplies($collection, $lazy = false)
		{
			$this->replies = new PostRepliesDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->replies->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return PostAttachmentsDAO
		**/
		public function getAttachments($lazy = false)
		{
			if (!$this->attachments || ($this->attachments->isLazy() != $lazy)) {
				$this->attachments = new PostAttachmentsDAO($this, $lazy);
			}
			
			return $this->attachments;
		}
		
		/**
		 * @return Post
		**/
		public function fillAttachments($collection, $lazy = false)
		{
			$this->attachments = new PostAttachmentsDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->attachments->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return PostReferencedBysDAO
		**/
		public function getReferencedBys($lazy = false)
		{
			if (!$this->referencedBys || ($this->referencedBys->isLazy() != $lazy)) {
				$this->referencedBys = new PostReferencedBysDAO($this, $lazy);
			}
			
			return $this->referencedBys;
		}
		
		/**
		 * @return Post
		**/
		public function fillReferencedBys($collection, $lazy = false)
		{
			$this->referencedBys = new PostReferencedBysDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->referencedBys->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return PostReferencesTosDAO
		**/
		public function getReferencesTos($lazy = false)
		{
			if (!$this->referencesTos || ($this->referencesTos->isLazy() != $lazy)) {
				$this->referencesTos = new PostReferencesTosDAO($this, $lazy);
			}
			
			return $this->referencesTos;
		}
		
		/**
		 * @return Post
		**/
		public function fillReferencesTos($collection, $lazy = false)
		{
			$this->referencesTos = new PostReferencesTosDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->referencesTos->mergeList($collection);
			
			return $this;
		}
	}
?>