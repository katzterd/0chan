<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2021-06-13 11:32:45                    *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoInvite extends IdentifiableObject
	{
		protected $user = null;
		protected $userId = null;
		protected $invite = null;
		protected $createdAt = null;
		protected $used = false;
		protected $usedBy = null;
		protected $usedById = null;
		
		/**
		 * @return User
		**/
		public function getUser()
		{
			if (!$this->user && $this->userId) {
				$this->user = User::dao()->getById($this->userId);
			}
			
			return $this->user;
		}
		
		public function getUserId()
		{
			return $this->user
				? $this->user->getId()
				: $this->userId;
		}
		
		/**
		 * @return Invite
		**/
		public function setUser(User $user)
		{
			$this->user = $user;
			$this->userId = $user ? $user->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Invite
		**/
		public function setUserId($id)
		{
			$this->user = null;
			$this->userId = $id;
			
			return $this;
		}
		
		/**
		 * @return Invite
		**/
		public function dropUser()
		{
			$this->user = null;
			$this->userId = null;
			
			return $this;
		}
		
		public function getInvite()
		{
			return $this->invite;
		}
		
		/**
		 * @return Invite
		**/
		public function setInvite($invite)
		{
			$this->invite = $invite;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getCreatedAt()
		{
			return $this->createdAt;
		}
		
		/**
		 * @return Invite
		**/
		public function setCreatedAt(Timestamp $createdAt)
		{
			$this->createdAt = $createdAt;
			
			return $this;
		}
		
		/**
		 * @return Invite
		**/
		public function dropCreatedAt()
		{
			$this->createdAt = null;
			
			return $this;
		}
		
		public function getUsed()
		{
			return $this->used;
		}
		
		public function isUsed()
		{
			return $this->used;
		}
		
		/**
		 * @return Invite
		**/
		public function setUsed($used = false)
		{
			$this->used = ($used === true);
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function getUsedBy()
		{
			if (!$this->usedBy && $this->usedById) {
				$this->usedBy = User::dao()->getById($this->usedById);
			}
			
			return $this->usedBy;
		}
		
		public function getUsedById()
		{
			return $this->usedBy
				? $this->usedBy->getId()
				: $this->usedById;
		}
		
		/**
		 * @return Invite
		**/
		public function setUsedBy(User $usedBy = null)
		{
			$this->usedBy = $usedBy;
			$this->usedById = $usedBy ? $usedBy->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Invite
		**/
		public function setUsedById($id = null)
		{
			$this->usedBy = null;
			$this->usedById = $id;
			
			return $this;
		}
		
		/**
		 * @return Invite
		**/
		public function dropUsedBy()
		{
			$this->usedBy = null;
			$this->usedById = null;
			
			return $this;
		}
	}
?>