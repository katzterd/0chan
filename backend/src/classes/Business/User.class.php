<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-04-16 15:41:40                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class User extends AutoUser implements Prototyped, DAOConnected
	{
        protected $moderatedBoards = null;

		/**
		 * @return User
		**/
		public static function create()
		{
			return new self;
		}
		
		/**
		 * @return UserDAO
		**/
		public static function dao()
		{
			return Singleton::getInstance('UserDAO');
		}
		
		/**
		 * @return ProtoUser
		**/
		public static function proto()
		{
			return Singleton::getInstance('ProtoUser');
		}

		public function isFavouriteBoard(Board $board) {
			/** @var FavouriteBoard[] $favouriteBoards */
			$favouriteBoards = $this->getFavouriteBoards()->getList();

			foreach ($favouriteBoards as $favouriteBoard) {
				if ($favouriteBoard->getBoardId() == $board->getId()) {
					return true;
				}
			}

			return false;
    }

    public function isWatchingThread(Thread $thread) {
      /** @var WatchedThread[] $watchedThreads */
      $watchedThreads = $this->getWatchedThreads()->getList();
        
      foreach ($watchedThreads as $watchedThread) {
			  if ($watchedThread->getThreadId() == $thread->getId()) {
				  return true;
			  }
		  }
        
		  return false;
    }

        public function setPasswordHashed($rawPassword) {
            $hashedPassword = password_hash($rawPassword, PASSWORD_BCRYPT);
            if (!$hashedPassword) {
                throw new WrongStateException('no hash');
            }
            return $this->setPassword($hashedPassword);
        }

        public function validatePassword($password) {
            return password_verify($password, $this->getPassword());
        }

        /**  -- Права пользователей: -- */

        public function canManageAllBoards() {
            return $this->roleId == UserRole::ADMIN;
        }

        public function canModerateAllBoards() {
            return $this->canManageAllBoards()
                || $this->roleId == UserRole::MODERATOR;
        }

        public function canManageBoard(Board $board) {
            return $this->canManageAllBoards()
                || $board->getOwnerId() == $this->getId();
        }

        public function canModerateBoard(Board $board) {
            return $this->canModerateAllBoards()
                || $this->canManageBoard($board)
                || $board->hasModerator($this);
        }

        /**
         * @return Board[]
         */
        public function getModeratedBoards($recache = false) {
            if ($this->moderatedBoards === null || $recache) {
                $this->moderatedBoards = Criteria::create(Board::dao())
                    ->setDistinct(true)
                    ->add(Expression::orBlock(
                        Expression::eq('moderators.user', $this),
                        Expression::eq('owner', $this)
                    ))
                    ->add(Expression::isFalse('deleted'))
                    ->addOrder(OrderBy::create('dir')->asc())
                    ->getList();
            }
            return $this->moderatedBoards;
        }

        public function export() {
            return [
                'id' => $this->getId(),
                'login' => $this->getLogin(),
                'create_date' => $this->getCreateDate()->toStamp()
            ];
        }
	}
?>
