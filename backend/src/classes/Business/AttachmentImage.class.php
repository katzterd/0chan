<?php

/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2017-03-02 15:25:45                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

class AttachmentImage extends AutoAttachmentImage implements Prototyped, DAOConnected
{
    /**
     * @return AttachmentImage
     **/
    public static function create()
    {
        return new self;
    }

    /**
     * @return AttachmentImageDAO
     **/
    public static function dao()
    {
        return Singleton::getInstance('AttachmentImageDAO');
    }

    /**
     * @return ProtoAttachmentImage
     **/
    public static function proto()
    {
        return Singleton::getInstance('ProtoAttachmentImage');
    }

    public function getStoragePath()
    {
        $path = PATH_STORAGE . $this->getFullFilename();
        $dir = dirname($path);
        if (!file_exists($dir)) {
            mkdir($dir, 0777, true);
        }
        return $path;
    }

    public function getWebPath()
    {
        $fullFilename = $this->getFullFilename();

        $baseHost = App::me()->getRequestHost();
        $baseHost = implode('.', array_slice(explode('.', $baseHost), -2));
        $prefix = '//' . MEDIA_SUBDOMAIN . '.' . $baseHost . '/';

        $url = $prefix . $fullFilename;
        return $url;
    }

    public static function secureWebPath($path, $ip)
    {
        $baseHost = App::me()->getRequestHost();
        $baseHost = implode('.', array_slice(explode('.', $baseHost), -2));
        $host = '//' . MEDIA_SUBDOMAIN . '.' . $baseHost . '/';

        $interval = 3600 * 2; // update expiration every 2 hours
        $expire = (ceil(time() / $interval) + 1) * $interval;
        $hash = md5("/$path:$expire:$ip:" . SALT, true);
        $hash = rtrim(strtr(base64_encode($hash), '+/', '-_'), '=');
        return $host . $path . '?hash=' . $hash . '&exp=' . $expire;
    }

    public static function webPath($path, $ip)
    {
        $baseHost = App::me()->getRequestHost();
        $baseHost = implode('.', array_slice(explode('.', $baseHost), -2));
        $host = '//' . MEDIA_SUBDOMAIN . '.' . $baseHost . '/';

        return $host . $path;
    }

    protected function getFullFilename()
    {
        $name = $this->getFilename();
        $path = '';
        $path .= substr($name, 0, 2) . '/';
        $path .= substr($name, 2, 2) . '/';
        $path .= substr($name, 4, 2) . '/';
        $path .= $name;
        return $path;
    }

    public function export()
    {
        return [
            'id'      => $this->getId(),
            'name'    => $this->getFilename(),
            'path'    => $this->getFullFilename(),
            'url'     => $this->getWebPath(),
            'md5'     => $this->getMd5(),
            'width'   => $this->getWidth(),
            'height'  => $this->getHeight(),
            'size_kb' => round($this->getFileSize() / 1024, 2)
        ];
    }

    public function writeFile($content)
    {
        $path = $this->getStoragePath();
        file_put_contents($path, $content);
        return $this;
    }

    public function removeFile()
    {
        StorageTrash::dao()->add(
            StorageTrash::create()
                ->setFilename($this->getFilename())
        );

        return $this;
    }
}
