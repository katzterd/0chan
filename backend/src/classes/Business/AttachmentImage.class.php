<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2017-03-02 15:25:45                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class AttachmentImage extends AutoAttachmentImage implements Prototyped, DAOConnected
	{
		/**
		 * @return AttachmentImage
		**/
		public static function create()
		{
			return new self;
		}
		
		/**
		 * @return AttachmentImageDAO
		**/
		public static function dao()
		{
			return Singleton::getInstance('AttachmentImageDAO');
		}
		
		/**
		 * @return ProtoAttachmentImage
		**/
		public static function proto()
		{
			return Singleton::getInstance('ProtoAttachmentImage');
		}

        public function getStoragePath() {
            $path = PATH_STORAGE . $this->getFullFilename();
            $dir = dirname($path);
            if (!file_exists($dir)) {
                mkdir($dir, 0777, true);
            }
            return $path;
        }

        public function getWebPath() {
		    $fullFilename = $this->getFullFilename();
            if ($this->getServer()) {
                $baseHost = App::me()->getRequestHost();
                $baseHost = implode('.', array_slice(explode('.', $baseHost), -2));
                $prefix = '//' . $this->getServer() . '.' . $baseHost . '/';
            } else {
                $prefix = '//' . App::me()->getRequestHost() . '/';
            }
            $url = $prefix . $fullFilename;
            return $url;
        }

        public static function secureWebPath($server, $path, $ip)
        {
            if ($server) {
                $baseHost = App::me()->getRequestHost();
                $baseHost = implode('.', array_slice(explode('.', $baseHost), -2));
                $host = '//' . $server . '.' . $baseHost . '/';
            } else {
                $host = '//' . App::me()->getRequestHost() . '/';
            }

            $interval = 3600 * 2; // update expiration every 2 hours
            $expire = (ceil(time() / $interval) + 1) * $interval;
            $hash = md5("/$path:$expire:$ip:" . SALT, true);
            $hash = rtrim(strtr(base64_encode($hash), '+/', '-_'), '=');
            return $host . $path . '?hash=' . $hash . '&exp=' . $expire;
        }

        protected function getFullFilename() {
            $name = $this->getFilename();
            $path = '';
            if (!$this->getServer()) {
                $path = 'images/';
            }
            $path .= substr($name, 0, 2) . '/';
            $path .= substr($name, 2, 2) . '/';
            $path .= substr($name, 4, 2) . '/';
            $path .= $name;
            return $path;
        }

        public function export() {
            return [
                'id'      => $this->getId(),
                'name'    => $this->getFilename(),
                'server'  => $this->getServer(),
                'path'    => $this->getFullFilename(),
                'url'     => $this->getWebPath(),
                'width'   => $this->getWidth(),
                'height'  => $this->getHeight(),
                'size_kb' => round($this->getFileSize() / 1024, 2)
            ];
        }

        public function writeFile($content)
        {
            if ($this->getServer()) {
                throw new WrongStateException('the file is not local: ' . $this->getFilename());
            }
            $path = $this->getStoragePath();
            file_put_contents($path, $content);
            return $this;
        }

        public function removeFile()
        {
            if ($this->getServer()) {
                StorageTrash::dao()->add(
                    StorageTrash::create()
                        ->setServer($this->getServer())
                        ->setFilename($this->getFilename())
                );
            } else {
                try {
                    @unlink($this->getStoragePath());
                } catch (Exception $e) {
                    // ignore
                }
            }

            return $this;
        }

	}
