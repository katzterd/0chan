<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-04-16 15:41:40                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class Thread extends AutoThread implements Prototyped, DAOConnected
	{
	    const CLEANUP_DELAY_AFTER_PURGED  = '12 hours';
	    const CLEANUP_DELAY_AFTER_DELETED = '2 hours';

	    protected $opPost = null;
		/**
		 * @return Thread
		**/
		public static function create()
		{
			return new self;
		}
		
		/**
		 * @return ThreadDAO
		**/
		public static function dao()
		{
			return Singleton::getInstance('ThreadDAO');
		}
		
		/**
		 * @return ProtoThread
		**/
		public static function proto()
		{
			return Singleton::getInstance('ProtoThread');
		}

		/**
		 * @param int $num
		 * @throws Exception
		 * @throws ObjectNotFoundException
		 * @return Post[]
		 */
		public function getLastPosts($num = 3) {
			$posts = Criteria::create(Post::dao())
                // TODO: better fetch images
                ->fetchCollection('attachments', false, Criteria::create(Attachment::dao())->fetchCollection('images'))
                ->add(Expression::eq('thread', $this))
				->add(Expression::notNull('parent'))
				->add(Expression::isFalse('deleted'))
				->addOrder(OrderBy::create('id')->desc())
				->setLimit($num)
				->getList();

			return array_reverse($posts);
		}

		public function getPostCount($recache = false) {
			$cacheKey = 'Thread__post_count_' . $this->getId();
			$postCount = null;
			if (!$recache) {
				$postCount = Cache::me()->get($cacheKey);
			}
			if (!$postCount) {
				$posts = clone $this->getPosts();
				$posts->setCriteria(
				    Criteria::create()
					    ->add(Expression::isFalse('deleted'))
				);
				$postCount = $posts->getCount();
				Cache::me()->set($cacheKey, $postCount);
			}
			return $postCount;
		}

        public function getTitle() {
		    $message = $this->getOpPost()->getMessage();

		    if (!$message) {
                $message = $this->getBoard()->getName();
            }

            $message = mb_substr($message, 0, 40);

            foreach (["\n", '.', '!', '?', ';', ':', ',', ' '] as $stopper) {
		        $pos = mb_strrpos($message, $stopper);
		        if ($pos < 15) continue;
                return mb_substr($message, 0, $pos);
            }

            $message = str_replace("\n", '', $message);

            return $message;
        }

        /**
         * @return Post
         */
        public function getOpPost()
        {
            if ($this->opPost) {
                return $this->opPost;
            }

            if ($this->getPosts()->isFetched()) {
                /** @var Post[] $posts */
                $posts = $this->getPosts()->getList();
                foreach ($posts as $post) {
                    if ($post->getParentId() == null) {
                        $this->opPost = $post;
                    }
                }
            } else {
                $this->opPost = Criteria::create(Post::dao())
                    ->add(Expression::eq('thread', $this))
                    ->add(Expression::isNull('parent'))
                    ->setLimit(1)
                    ->get();
            }

            return $this->opPost;
        }

        public function export()
        {
            $viewer = App::me()->getUser();
            $isWatched = false;
            if ($viewer && $viewer->isWatchingThread($this)) {
                $isWatched = true;
            }
            return [
                'id' => $this->getId(),
                'board' => $this->getBoard()->export(),
                'title' => $this->getTitle(),
                'purgedAt' => $this->getPurgedAt()
                    ? $this->getPurgedAt()->spawn(self::CLEANUP_DELAY_AFTER_PURGED)->toStamp()
                    : null,
                'isPinned' => $this->isSticky(),
                'isLocked' => $this->isLocked(),
                'isDeleted' => $this->isDeleted(),
                'isBumpLimitReached' => $this->isBumpLimitReached(),
                'isWatched' => $isWatched,
            ];
        }
	}
