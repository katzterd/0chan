<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2018-01-04 15:17:04                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class ModeratorLog_Attachment extends AutoModeratorLog_Attachment implements Prototyped, DAOConnected
	{
	    /** @var bool  */
	    protected $attachmentFetched = false;
	    /** @var Attachment|null  */
	    protected $attachment = null;

		/**
		 * @return ModeratorLog_Attachment
		**/
		public static function create()
		{
			return new self;
		}

		/**
		 * @return ModeratorLog_AttachmentDAO
		**/
		public static function dao()
		{
			return Singleton::getInstance('ModeratorLog_AttachmentDAO');
		}
		
		/**
		 * @return ProtoModeratorLog_Attachment
		**/
		public static function proto()
		{
			return Singleton::getInstance('ProtoModeratorLog_Attachment');
		}

        /**
         * @param Attachment $attachment
         * @return ModeratorLog_Attachment
         */
        public function setAttachment(Attachment $attachment)
        {
            return $this
                ->setPost($attachment->getPost())
                ->setAttachmentId($attachment->getId());
        }

        /**
         * @return Attachment|null
         */
        public function getAttachment()
        {
            if (!$this->attachmentFetched && $this->attachmentId) {
                try {
                    $this->attachment = Attachment::dao()->getById($this->attachmentId);
                } catch (ObjectNotFoundException $e) {
                    $this->attachment = null;
                }
                $this->attachmentFetched = true;
            }

            return $this->attachment;
        }

        public function exportInfo()
        {
            return array_merge(
                parent::exportInfo(),
                [
                    'attachmentId' => $this->getAttachmentId(),
                    'attachment' => $this->getAttachment() ? $this->getAttachment()->export() : null,
                ]
            );
        }


    }
?>