<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-08-21 18:13:59                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class UserSession extends AutoUserSession implements Prototyped
	{
		const REQUEST_PARAM_NAME = 'session';
		const SESSION_TTL_DAYS = 30;

		/** @var Ban[] */
		protected $activeBans = null;

		/**
		 * @return UserSession
		**/
		public static function create()
		{
			return new self;
		}
		
		
		/**
		 * @return ProtoUserSession
		**/
		public static function proto()
		{
			return Singleton::getInstance('ProtoUserSession');
		}

        /**
         * @return User
         */
        public function getUser() {
            if (!$this->getUserId()) {
                return null;
            }
            return User::dao()->getById($this->getUserId());
        }

		public static function makeSessionId() {
			$sessionId = '';
			$alphabet = '1234567890abcdefghijklmnopqrstuvwxyz';
			for ($i = 0; $i < 32; $i++) {
				$sessionId .= $alphabet[mt_rand(0, 35)];
			}
			return $sessionId;
		}

		public static function makeCacheKey($sessionId) {
			return '__session_storage__' . $sessionId;
		}

		public static function start(HttpRequest $request, User $user = null) {
			do {
				$sessionId = self::makeSessionId();
			} while (
				Cache::me()->get(self::makeCacheKey($sessionId))
			);

			$session = self::create()
				->setSessionId($sessionId)
				->setIpAddress(RequestUtils::getRealIp($request))
				->setUserAgent($request->getServerVar('HTTP_USER_AGENT'));

            if ($user instanceof User) {
                $session->setUserId($user->getId());
            }

            $session->prolongate();
            $session->send();

			return $session;
		}

		public static function detect(HttpRequest $request) {
			$sessionId = null;
			if ($request->hasGetVar('session')) {
				$sessionId = $request->getGetVar('session');
			} else if ($request->hasPostVar('session')) {
				$sessionId = $request->getPostVar('session');
			} else if ($request->hasServerVar('HTTP_X_SESSION')) {
                $sessionId = $request->getServerVar('HTTP_X_SESSION');
            }

			$session = null;
			if ($sessionId) {
				$session = Cache::me()->get(self::makeCacheKey($sessionId));
                if (
                    ! ($session instanceof self)
                    || $request->getServerVar('HTTP_USER_AGENT') != $session->getUserAgent()
                    || RequestUtils::getRealIp($request) != $session->getIpAddress()
                ) {
                    $session = null;
                }
			}

			if ($session instanceof self) {
				$session->prolongate();
			}

			return $session;
		}

		public function destroy() {
			Cache::me()->delete(self::makeCacheKey($this->getSessionId()));
            /*
			Cookie::create(self::REQUEST_PARAM_NAME)
				->setMaxAge(-1)
                ->setPath('/admin/')
                ->setValue(null)
				->httpSet();
            */
		}

		public function prolongate() {
			Cache::me()->set(
			    self::makeCacheKey($this->getSessionId()),
                $this,
                $this->getUser() ? self::SESSION_TTL_DAYS * 86400 : 300
            );
            /*
			if ($this->getUser()->getRoleId() == UserRole::ADMIN) {
				Cookie::create(self::REQUEST_PARAM_NAME)
					->setMaxAge(self::SESSION_TTL_DAYS * 86400)
                    ->setPath('/admin/')
					->setValue($this->getSessionId())
					->httpSet();
			}
            */
			return $this;
		}

        public function send()
        {
            header('X-Session: ' . $this->getSessionId());
            return $this;
		}

        public function getActiveBans($recache = false)
        {
            if ($this->activeBans === null || $recache) {
                $now = Timestamp::makeNow();
                $criteria = Criteria::create(Ban::dao())
                    ->add(Expression::gt('bannedTill', $now))
                    ->add(Expression::isNull('unbannedAt'));

                $matchExpression = Expression::eq('ipHash', $this->getIpHash());
                if ($this->getUser()) {
                    $matchExpression = Expression::orBlock(
                        $matchExpression,
                        Expression::eq('user', $this->getUser())
                    );
                }
                $criteria->add($matchExpression);
                $criteria->addOrder(OrderBy::create('id')->asc());
                $this->activeBans = $criteria->getList();
            }
            return $this->activeBans;
		}

        public function getActiveBanInBoard(Board $board)
        {
            foreach ($this->getActiveBans() as $ban) {
                if ($ban->getBoardId() == $board->getId()) {
                    return $ban;
                }
            }
            return null;
		}

        public function getIpHash()
        {
            return RequestUtils::hashIp($this->getIpAddress());
		}

        public function getIpCountry()
        {
            return HeaderUtils::getRequestHeader('CF-IpCountry');
		}

        public function isIpCountryRu()
        {
            return $this->getIpCountry() == 'RU';
		}
	}
?>