<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2015-04-18 23:11:47                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class ModeratorLog extends AutoModeratorLog implements Prototyped, DAOConnected
	{
		/**
		 * @return ModeratorLog
		**/
		public static function create()
		{
			return new self;
		}
		
		/**
		 * @return ModeratorLogDAO
		**/
		public static function dao()
		{
			return Singleton::getInstance('ModeratorLogDAO');
		}
		
		/**
		 * @return ProtoModeratorLog
		**/
		public static function proto()
		{
			return Singleton::getInstance('ProtoModeratorLog');
		}

        public function export(User $viewer) {
		    $modName = $this->getEventUser()->getLogin();
		    if ($viewer->getRole()->is(UserRole::USER) && $this->getEventUser()->getRole()->is(UserRole::MODERATOR)) {
		        $modName = 'глобальный модератор';
            }
		    if ($viewer->getRole()->is(UserRole::USER) && $this->getEventUser()->getRole()->is(UserRole::ADMIN)) {
		        $modName = 'глобальный админ';
            }
            return [
                'id'    => $this->getId(),
                'user'  => $modName,
                'date'  => $this->getEventDate()->toStamp(),
                'board' => [
                    'dir'  => $this->getBoard()->getDir(),
                    'name' => $this->getBoard()->getName(),
                ],
                'event' => $this->getEventType()->getName(),
                'info'  => $this->exportInfo()
            ];
		}

        public function exportInfo() {
            return null;
        }

        /**
         * @param Board $board
         * @param ModeratorLogEventType|int $type
         * @return static
         */
        public static function make(Board $board, /* ModeratorLogEventType */ $type) {
		    if (! ($type instanceof ModeratorLogEventType)) {
		        $type = ModeratorLogEventType::create($type);
            }
            $user = App::me()->getUser();
		    if (! ($user instanceof User)) {
		        throw new BadMethodCallException('cant create with anonymous user');
            }

            $log = static::create();
		    Assert::isEqual(get_class($log), $type->getClassName(), 'wrong event type');

            $log->setEventDate(Timestamp::makeNow())
                ->setEventType($type)
                ->setEventUser(App::me()->getUser())
                ->setBoard($board);

            return $log;
        }

        public function add()
        {
            return static::dao()->add($this);
        }
	}
?>