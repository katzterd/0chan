<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-08-29 14:44:36                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class AttachmentEmbedService extends EnumX
	{
        const YOUTUBE = 1;
        const VIMEO = 2;
        const SOUNDCLOUD = 3;
        const COUB = 4;
        const TED = 5;

        protected $fetchedPreviewUrls = [];
        protected $fetchedContentData = [];

		protected static $names = array(
            self::YOUTUBE    => 'youtube',
            self::VIMEO      => 'vimeo',
            self::SOUNDCLOUD => 'soundcloud',
            self::COUB       => 'coub',
            self::TED        => 'ted',
        );

		protected static $match = [
		    self::YOUTUBE => [
		        '/youtube\.com\/watch\?v=([a-z0-9_-]+)/i',
		        '/youtu\.be\/([a-z0-9_-]+)/i',
            ],
            self::VIMEO => [
                '/vimeo\.com\/([0-9]+)/i',
            ],
            self::SOUNDCLOUD => [
                '/(soundcloud.com\/[a-z0-9\-_\/]+)/i'
            ],
            self::COUB => [
                '/coub\.com\/view\/([a-z0-9]+)/i'
            ],
            self::TED => [
                '/ted\.com\/talks\/([a-z0-9_-]+)/i'
            ],
        ];

        /**
         * @param $url
         * @return AttachmentEmbed|null
         * @throws ObjectNotFoundException
         */
        public function match($url)
        {
            foreach (self::$match[$this->id] as $match) {
                if (preg_match($match, $url, $m)) {
                    $embedId = $m[1];
                    $this->fetch($embedId);
                    $previewUrl = $this->getPreviewUrl($embedId);
                    if (!$previewUrl) {
                        throw new ObjectNotFoundException('cant fetch previewUrl for ' . $embedId);
                    }

                    $embed = AttachmentEmbed::create()
                        ->setEmbedId($embedId)
                        ->setService($this)
                        ->setTitle($this->getContent($embedId));

                    return $embed;
                }
            }
            return null;
		}

		protected function fetch(&$embedId) {
            if (array_key_exists($embedId, $this->fetchedPreviewUrls)
             || array_key_exists($embedId, $this->fetchedContentData)
            ) {
                // already fetched
                return $this;
            }
            $previewUrl = null;
            $contentData = null;
            switch ($this->id) {
                case self::YOUTUBE:
                    /*
                    $url = 'http://www.youtube.com/get_video_info?video_id='.$embedId."&html5=1";
                    $ytData = file_get_contents($url);
                    if ($ytData) {
                        parse_str($ytData, $ytDataArr);
                        if (isset($ytDataArr['iurl'])) {
                            $previewUrl = $ytDataArr['iurl'];
                        }
                        if (!$previewUrl) {
                            $previewUrl = 'http://i.ytimg.com/vi/' . $embedId . '/hqdefault.jpg';
                        }
                        if (isset($ytDataArr['title'])) {
                            $contentData = $ytDataArr['title'];
                        }
                    }*/
                    $previewUrl = 'https://img.youtube.com/vi/'.$embedId.'/0.jpg';
                    break;

                case self::VIMEO:
                    $apiUrl = "http://vimeo.com/api/v2/video/$embedId.json";
                    try {
                        $json = file_get_contents($apiUrl);
                        $info = json_decode($json, true);
                        if (is_array($info) && isset($info[0])) {
                            $previewUrl = $info[0]['thumbnail_large'];
                            $contentData = $info[0]['title'];
                        }
                    } catch (BaseException $e) {
                        // skip
                    }
                    break;

                case self::SOUNDCLOUD:
                    $apiUrl = 'https://soundcloud.com/oembed?url=https%3A%2F%2F' . urlencode($embedId) . '&format=json';
                    try {
                        $json = file_get_contents($apiUrl);
                        $info = json_decode($json, true);
                        if (is_array($info)) {
                            $previewUrl = $info['thumbnail_url'];
                            $contentData = $info['title'];
                            if (preg_match('/tracks%2F(\d+)/', $info['html'], $m)) {
                                $embedId = $m[1];
                            }
                        }
                    } catch (BaseException $e) {
                        // skip
                    }
                    break;

                case self::COUB:
                    $apiUrl = 'http://coub.com/api/oembed.json?url=' . urlencode('http://coub.com/view/' . $embedId);
                    try {
                        $json = file_get_contents($apiUrl);
                        $info = json_decode($json, true);
                        if (is_array($info)) {
                            $previewUrl = $info['thumbnail_url'];
                            $contentData = $info['title'];
                        }
                    } catch (BaseException $e) {
                        // skip
                    }
                    break;

                case self::TED:
                    $apiUrl = 'http://www.ted.com/services/v1/oembed.json?url=' . urlencode('http://ted.com/talks/' . $embedId);
                    try {
                        $json = file_get_contents($apiUrl);
                        $info = json_decode($json, true);
                        if (is_array($info)) {
                            $previewUrl = $info['thumbnail_url'];
                            $contentData = $info['title'];
                        }
                    } catch (BaseException $e) {
                        // skip
                    }
                    break;

                default:
                    throw new UnimplementedFeatureException();
            }

            $this->fetchedPreviewUrls[$embedId] = $previewUrl;
            $this->fetchedContentData[$embedId] = $contentData;

            return $this;
        }

        public function getPreviewUrl($embedId) {
            $this->fetch($embedId);
            return isset($this->fetchedPreviewUrls[$embedId]) ? $this->fetchedPreviewUrls[$embedId] : null;
        }

        public function getContent($embedId) {
            $this->fetch($embedId);
            return isset($this->fetchedContentData[$embedId]) ? $this->fetchedContentData[$embedId] : null;
        }

        public function getHtml(AttachmentEmbed $embed)
        {
            $iframeAttrs = 'frameborder="0" scrolling="no" webkitallowfullscreen mozallowfullscreen allowfullscreen';
            $src = null;
            switch ($this->id) {
                case self::YOUTUBE:
                    $src = 'https://www.youtube.com/embed/' . $embed->getEmbedId() . '?autoplay=1';
                    $aspect = '16:9';
                    break;

                case self::VIMEO:
                    $src = 'https://player.vimeo.com/video/' . $embed->getEmbedId() . '?autoplay=1&badge=0';
                    $aspect = '16:9';
                    break;

                case self::SOUNDCLOUD:
                    $src = 'https://w.soundcloud.com/player/'
                        . '?url=https%3A//api.soundcloud.com/tracks/' . $embed->getEmbedId()
                        . '&auto_play=true&hide_related=false&show_comments=true&show_user=true&show_reposts=false&visual=true';
                    $aspect = '1:1';
                    break;

                case self::COUB:
                    $src = 'https://coub.com/embed/' . $embed->getEmbedId() . '?muted=false&autostart=true&originalSize=false&startWithHD=false';
                    $aspect = '4:3';
                    break;

                case self::TED:
                    $src = 'https://embed.ted.com/talks/lang/ru/' . $embed->getEmbedId() . '?autoplay=1';
                    $aspect = '16:9';
                    break;

                default:
                    Assert::isUnreachable();
            }

            $iframe = '<iframe src="' . $src . '" ' . $iframeAttrs . '></iframe>';
            return '<div class="embed" aspect="' . $aspect . '">' . $iframe . '</div>';
        }
	}
?>