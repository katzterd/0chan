<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-04-22 18:38:55                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class Ban extends AutoBan implements Prototyped, DAOConnected
	{
		/**
		 * @return Ban
		**/
		public static function create()
		{
			return new self;
		}
		
		/**
		 * @return BanDAO
		**/
		public static function dao()
		{
			return Singleton::getInstance(BanDAO::class);
		}
		
		/**
		 * @return ProtoBan
		**/
		public static function proto()
		{
			return Singleton::getInstance(ProtoBan::class);
		}

        public function isActive()
        {
            $now = time();
            if ($now < $this->getBannedAt()->toStamp()) {
                return false;
            }
            if ($this->getUnbannedAt() && $now > $this->getUnbannedAt()->toStamp()) {
                return false;
            }
            if ($now > $this->getBannedTill()->toStamp()) {
                return false;
            }
            return true;
		}

        public function getTimeleft()
        {
            $till = $this->getUnbannedAt() ?: $this->getBannedTill();
            $timeleft = $till->toStamp() - time();
            return $timeleft > 0 ? $timeleft : null;
		}

        public function isAppliedTo(UserSession $session)
        {
            if ($session->getUser() && $session->getUser()->getId() == $this->getUserId()) {
                return true;
            }
            if ($session->getIpHash() === $this->getIpHash()) {
                return true;
            }
            return false;
		}

        public function export($forMod = false)
        {
            $info = [
                'id' => $this->getId(),
                'board' => $this->getBoard()->export(),
                'reason' => $this->getReason(),
                'isActive' => $this->isActive(),
                'bannedAt' => $this->getBannedAt()->toStamp(),
                'unbannedAt' => $this->getUnbannedAt() ? $this->getUnbannedAt()->toStamp() : null,
                'bannedTill' => $this->getBannedTill()->toStamp(),
                'timeleft' => $this->getTimeleft(),
                'appeal' => $this->getAppeal(),
            ];

            if ($forMod) {
                $info = array_merge($info, [
                    'post' => $this->getPost() ? $this->getPost()->export() : null,
                    'bannedBy' => $this->getBannedBy()->getLogin(),
                    'unbannedBy' => $this->getUnbannedBy() ? $this->getUnbannedBy()->getLogin() : null,
                ]);
            }

            return $info;
		}
	}
?>