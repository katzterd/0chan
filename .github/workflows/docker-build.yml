name: Docker build

on: pull_request

env:
  FRONTEND_IMAGE_NAME: frontend
  BACKEND_IMAGE_NAME: backend
  STORAGE_IMAGE_NAME: storage
  TORGATE_IMAGE_NAME: torgate
  I2PGATE_IMAGE_NAME: i2pgate
  YGGDRASILGATE_IMAGE_NAME: yggdrasil

jobs:

  diff:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      buildDocker: ${{ steps.diff.outputs.buildDocker }}
    steps:
    - uses: dorny/paths-filter@v3
      id: diff
      with:
        filters: |
          buildDocker:
            - 'frontend/**'
            - '!frontend/.gitignore'
            - 'backend/**'
            - '!backend/.gitignore'
            - 'storage/**'
            - 'torgate/**'
            - 'i2pgate/**'
            - 'yggdrasil/**'

  buildDocker:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      packages: write
    needs: diff
    if: ${{ needs.diff.outputs.buildDocker == 'true' }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Filter
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - '!frontend/.gitignore'
            backend:
              - 'backend/**'
              - '!backend/.gitignore'
            storage:
              - 'storage/**'
            torgate:
              - 'torgate/**'
            i2pgate:
              - 'i2pgate/**'
            yggdrasilgate:
              - 'yggdrasil/**'
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      -
        name: Build frontend [Public]
        uses: docker/build-push-action@v5
        if: steps.filter.outputs.frontend == 'true'
        with:
          context: frontend/.
          file: frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      -
        name: Build backend [Public]
        uses: docker/build-push-action@v5
        if: steps.filter.outputs.backend == 'true'
        with:
          context: backend/.
          file: backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      -
        name: Build storage [Public]
        uses: docker/build-push-action@v5
        if: steps.filter.outputs.storage == 'true'
        with:
          context: storage/.
          file: storage/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ env.STORAGE_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      -
        name: Build torgate [Public]
        uses: docker/build-push-action@v5
        if: steps.filter.outputs.torgate == 'true'
        with:
          context: torgate/.
          file: torgate/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ env.TORGATE_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      -
        name: Build i2pgate [Public]
        uses: docker/build-push-action@v5
        if: steps.filter.outputs.i2pgate == 'true'
        with:
          context: i2pgate/.
          file: i2pgate/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ env.I2PGATE_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      -
        name: Build yggdrasilgate [Public]
        uses: docker/build-push-action@v5
        if: steps.filter.outputs.yggdrasilgate == 'true'
        with:
          context: yggdrasil/.
          file: yggdrasil/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ env.YGGDRASILGATE_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
